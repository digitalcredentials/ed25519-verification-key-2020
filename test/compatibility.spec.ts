/*!
 * Copyright (c) 2020 Digital Bazaar, Inc. All rights reserved.
 */
import { expect } from 'chai'

import { Ed25519VerificationKey2020 } from '../src'
import { stringToUint8Array } from './text-encoder'
import * as StableLibEd25519 from '@stablelib/ed25519'
import { randomBytes } from 'crypto'

import * as jose from 'jose'

import { promisify } from 'util'

const randomBytesAsync = promisify(randomBytes)

describe('compatibility', () => {
  describe('node ed25519 keys', () => {
    it('should verify signature from @stablelib/ed25519', async () => {
      const seed = await randomBytesAsync(32)
      const data = stringToUint8Array('node key test')
      const { secretKey } = await StableLibEd25519.generateKeyPairFromSeed(seed)
      const signature = await StableLibEd25519.sign(secretKey, data)
      const libraryNodeKey = await Ed25519VerificationKey2020.generate({ seed })
      const result = await libraryNodeKey.verifier().verify({ data, signature })
      expect(result).to.be.true
    })
  })
  describe('@stablelib ed25519 keys', () => {
    it('should verify signature from node ed25519 keys', async () => {
      const data = stringToUint8Array('ed25519 key test')
      const seed = await randomBytesAsync(32)
      const libraryNodeKey = await Ed25519VerificationKey2020.generate({ seed })
      const signature = await libraryNodeKey.signer().sign({ data })
      const { publicKey } = await StableLibEd25519.generateKeyPairFromSeed(seed)
      const result = await StableLibEd25519.verify(publicKey, data, signature)
      expect(result).to.be.true
    })
  })

  describe('jose lib roundtrip import/export', () => {
    it('should round-trip to and from jose', async () => {
      // generated by 'jose' lib via `await jose.exportJWK(await jose.generateKeyPair('EdDSA'))`
      const exampleJoseKey = {
        crv: 'Ed25519',
        d: 'y71N3tdun63bo9OBHXuI03qaV3eY3kL1ypoG8tFy4LI',
        x: 'JOVEKqgcoSaDbYimIWoJHcvlZefVDQJXtKMmSRBHCHU',
        kty: 'OKP'
      }

      const keyPair = await Ed25519VerificationKey2020.fromJsonWebKey2020({
        type: 'JsonWebKey2020',
        publicKeyJwk: {...exampleJoseKey},
        privateKeyJwk: {...exampleJoseKey}
      })

      const exportedJwk: any = await keyPair.toJwk({publicKey: true, privateKey: true})

      expect(exportedJwk).to.eql({
          crv: 'Ed25519',
          d: 'y71N3tdun63bo9OBHXuI03qaV3eY3kL1ypoG8tFy4LI',
          x: 'JOVEKqgcoSaDbYimIWoJHcvlZefVDQJXtKMmSRBHCHU',
          kty: 'OKP'
      })

      const importedJoseKey = await jose.importJWK(exportedJwk, 'EdDSA')
      expect(await jose.exportJWK(importedJoseKey)).to.eql({
        crv: 'Ed25519',
        d: 'y71N3tdun63bo9OBHXuI03qaV3eY3kL1ypoG8tFy4LI',
        x: 'JOVEKqgcoSaDbYimIWoJHcvlZefVDQJXtKMmSRBHCHU',
        kty: 'OKP'
      })
    })
  })
})
